{"version":3,"sources":["../es6/randomizer.js"],"names":[],"mappings":"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","file":"randomizer.js","sourcesContent":["class Randomizer {\r\n\r\n    static rand(min, max, allowFloats) {\r\n        if (min === undefined ||Number.isNaN(min) || max === undefined || Number.isNaN(max)) return undefined;\r\n\r\n        if (allowFloats)\r\n            return min + (Math.random() * (max-min));\r\n        else\r\n            return min + Math.floor(Math.random() * (max-min+1));\r\n    }\r\n\r\n    static pickWeightedRandom(choices) {\r\n        var ret = undefined;\r\n        choices = $.extend(true, [], choices);\r\n        if (choices.length === 1) ret = choices[0];\r\n        else {\r\n            var currentCumSum = 0;\r\n            choices.forEach(function(c){\r\n                Utils.assert(c.hasOwnProperty(\"weight\"),\r\n                    `Invalid parameter format - each object in array needs a weight. (${JSON.stringify(choices)})`);\r\n                currentCumSum += c.weight;\r\n                c.cumSum = currentCumSum;\r\n            });\r\n            var r = Randomizer.rand(0,currentCumSum, true);\r\n            choices.forEach(function(c, i){\r\n                if (r < c.cumSum && !ret) ret = choices[i];\r\n            });\r\n            delete ret.cumSum;\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    static genSingleChoiceTile(diff, group, mainNumber) {\r\n\r\n        mainNumber = +mainNumber;\r\n\r\n        var choice = Randomizer.getRandomTileData(diff);\r\n        var choicesSoFar = group.choices;\r\n\r\n        var reRoll = () => Randomizer.getRandomTileData(diff);\r\n\r\n        var count = function(id) {\r\n            let count = 0;\r\n            choicesSoFar.forEach(c => { count += c.id === id });\r\n            return count;\r\n        };\r\n\r\n        var scope = () => ({mainNumber, myCount: count(choice.id)});\r\n\r\n        while (choice.condition !== undefined && false === math.eval(choice.condition, scope())) {\r\n            choice = reRoll(); // TODO (1) reRoll the problematic value instead of entire choice?\r\n                                // ex: if subtracting will make the result negative, reRoll the subtracted value\r\n        }\r\n        return choice;\r\n    }\r\n\r\n    static getRandomTileData(difficulty, isMain=false) { // this pulls from difficulty.js\r\n\r\n        Utils.assert(typeof difficulty === \"number\" && DIFFICULTY_DATA[difficulty] !== undefined,\r\n            `Invalid difficulty: ${difficulty}`);\r\n\r\n        var choices = DIFFICULTY_DATA[difficulty][isMain ? \"main\" : \"choices\"];\r\n\r\n        var choice = Randomizer.pickWeightedRandom(choices);\r\n\r\n        var value = undefined;\r\n        switch (choice.type) {\r\n            case \"integer\":\r\n                value = Utils.rand(...choice.limits);\r\n                break;\r\n            case \"fraction\":\r\n                value = Utils.buildFraction(\r\n                    Randomizer.rand(...(choice.numeratorLimits || [NaN])),\r\n                    Randomizer.rand(...(choice.denominatorLimits || NaN)),\r\n                    Randomizer.rand(...(choice.resultLimits || [NaN]))\r\n                ).toString();\r\n                break;\r\n            case \"power\":\r\n            case \"exponent\":\r\n                value = `${Randomizer.rand(...choice.baseLimits)} ^ ${choice.power ||\r\n                    Randomizer.rand(...choice.powerLimits)}`;\r\n                break;\r\n            default:\r\n                value = NaN;\r\n        }\r\n\r\n        var operation = isMain ? \"\" : choice.operation;\r\n\r\n        //return operation + value;\r\n        return {\r\n            value,\r\n            valueString: [operation,value].join(\" \"),\r\n            operation,\r\n            condition: choice.condition // TODO (1) return a function to randomize the value (again?)\r\n        };\r\n    }\r\n}"]}