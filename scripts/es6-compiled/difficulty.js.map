{"version":3,"sources":["../es6/difficulty.js"],"names":[],"mappings":"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","file":"difficulty.js","sourcesContent":["var DIFFICULTY_DATA = [null,\n\n//----------------------DIFFICULTY 1-----------------------------\n\t{\n\t\tmain: [\n\t\t\t{\n\t\t\t\ttype: \"integer\",\n\t\t\t\tweight: 1,\n\t\t\t\tlimits: [1,50]\n\t\t\t}\n\t\t],\n\t\tchoices: [\n\t\t\t{\n\t\t\t\ttype: \"integer\",\n\t\t\t\tweight: 1,\n\t\t\t\tlimits: [1, 50],\n\t\t\t\toperation: \"add\"\n\t\t\t}\n\t\t]\n\t},\n\n//----------------------DIFFICULTY 2-----------------------------\n\t\t{\n\t\tmain: [\n\t\t\t{\n\t\t\t\ttype: \"integer\",\n\t\t\t\tweight: 1,\n\t\t\t\tlimits: [1, 50]\n\t\t\t}\n\t\t],\n\t\tchoices: [\n\t\t\t{\n\t\t\t\ttype: \"integer\",\n\t\t\t\tweight: 3,\n\t\t\t\tlimits: [1, 99],\n\t\t\t\toperation: \"add\"\n\t\t\t},\n\t\t\t{\n\t\t\t\ttype: \"integer\",\n\t\t\t\tweight: 1,\n\t\t\t\tlimits: [1, 50],\n\t\t\t\toperation: \"sub\"\n\t\t\t}\n\t\t]\n\t},\n\n//----------------------DIFFICULTY 3-----------------------------\n\t{\n\t\tmain: [\n\t\t\t{\n\t\t\t\ttype: \"integer\",\n\t\t\t\tweight: 1,\n\t\t\t\tlimits: [1,500]\n\t\t\t}\n\t\t],\n\t\tchoices: [\n\t\t\t{\n\t\t\t\ttype: \"integer\",\n\t\t\t\tweight: 1,\n\t\t\t\tlimits: [1, 500],\n\t\t\t\toperation: \"add\"\n\t\t\t},\n\t\t\t{\n\t\t\t\ttype: \"integer\",\n\t\t\t\tweight: 1,\n\t\t\t\tlimits: [1,500],\n\t\t\t\toperation: \"sub\" // TODO (2) prevent final answer from being negative\n\t\t\t}\n\t\t]\n\t},\n\n//----------------------DIFFICULTY 4-----------------------------\n\t{\n\t\tmain: [\n\t\t\t{\n\t\t\t\ttype: \"integer\",\n\t\t\t\tweight: 10,\n\t\t\t\tlimits: [1, 25]\n\t\t\t},\n\t\t\t{\n\t\t\t\ttype: \"integer\",\n\t\t\t\tweight: 1,\n\t\t\t\tlimits: [1, 99]\n\t\t\t}\n\t\t],\n\t\tchoices: [\n\t\t\t{\n\t\t\t\ttype: \"integer\",\n\t\t\t\tlimits: [1,12],\n\t\t\t\tweight: 20,\n\t\t\t\toperation: \"multi\",\n\t\t\t\tconditions: [\n\t\t\t\t\t\"mainNumber <= 12\",\n\t\t\t\t\t\"myCount < 1\"\n\t\t\t\t]\n\t\t\t},\n\t\t\t{\n\t\t\t\ttype: \"integer\",\n\t\t\t\tlimits: [1,50],\n\t\t\t\tweight: 1,\n\t\t\t\toperation: \"add\"\n\t\t\t},\n\t\t\t{\n\t\t\t\ttype: \"integer\",\n\t\t\t\tlimits: [1,50],\n\t\t\t\tweight: 1,\n\t\t\t\toperation: \"sub\"\n\t\t\t}\n\t\t]\n\t},\n\t{\n\t\tmain: [\n\t\t\t{\n\t\t\t\ttype: \"integer\",\n\t\t\t\tlimits: [1,50],\n\t\t\t\tweight: 1\n\t\t\t}\n\t\t],\n\t\tchoices: [\n\t\t\t{\n\t\t\t\ttype: \"power\",\n\t\t\t\tbaseLimits: [2,12],\n\t\t\t\tpower: 2,\n\t\t\t\tweight: 50,\n\t\t\t\toperation: \"add\"\n\t\t\t},\n\t\t\t{\n\t\t\t\ttype: \"fraction\",\n\t\t\t\tresultLimits: [2,12],\n\t\t\t\tdenominatorLimits: [2,12],\n\t\t\t\tweight: 500,\n\t\t\t\toperation: \"add\"\n\t\t\t},\n\t\t\t{\n\t\t\t\ttype: \"integer\",\n\t\t\t\tlimits: [1,50],\n\t\t\t\tweight: 2,\n\t\t\t\toperation: \"add\"\n\t\t\t},\n\t\t\t{\n\t\t\t\ttype: \"integer\",\n\t\t\t\tlimits: [1,50],\n\t\t\t\tweight: 2,\n\t\t\t\toperation: \"sub\"\n\t\t\t}\n\t\t]\n\t}\n];\n\nDIFFICULTY_DATA.forEach(function(diffGroup, diff) { // for each difficulty\n\n\tUtils.forEachIn(function (type, typeData) { // for each type (main/choices)\n\n\t\ttypeData.forEach(function (data) { // for each choice\n\t\t\tdata.id = [diff, type, typeData.indexOf(data)].join(\"_\");\n\t\t\tif (data.hasOwnProperty(\"conditions\"))\n\t\t\t\tdata.condition = data.conditions.join(\" and \");\n\t\t}); // end for each choice\n\n\t}, diffGroup); // end for each type\n\n}); // end for each difficulty\n\n/*\nclass Choice {\n    constructor(diff, isMain=false) {\n        this.which = isMain ? \"main\" : \"choices\";\n        this.diff = diff;\n\t\tthis.data = undefined;\n    }\n\n\tget id() {\n\t\treturn [\n\t\t\tthis.diff,\n\t\t\tthis.which.charAt(0),\n\t\t\tDIFFICULTY_DATA[this.diff][this.which].indexOf(this.data)\n\t\t].join(\".\");\n\t}\n}\n\nfunction _genSingleChoiceTile(diff, group, mainNumber) {\n\n\tmainNumber = +mainNumber;\n\n\tvar choice = TileRegistry.getRandomTileData(diff);\n\tvar choicesSoFar = group.choices;\n\n\tvar reRoll = () => TileRegistry.getRandomTileData(diff);\n\n\t//called before adding any more elements, preventing going over max\n\tvar hasMax = function(choices) { // currently limited to one option with maxCount; need some sort of ID system to determine which choice is which\n\t\tvar count = 0;\n\t\tvar max = 0;\n\t\treturn choices.some(function(c){\n\t\t\tif (c.maxCount !== undefined) {\n\t\t\t\tif (max === 0) max = c.maxCount;\n\t\t\t\tif (max > 0 && max === ++count) return true;\n\t\t\t}\n\t\t});\n\t};\n\n\tvar success = false;\n\twhile (!success && ((choice.condition !== undefined) || (choice.maxCount !== undefined))) {\n\t\tsuccess = true;\n\t\twhile (choice.condition !== undefined && math.eval(choice.condition, {mainNumber}) === false) {\n\t\t\tchoice = reRoll();\n\t\t\tsuccess = false;\n\t\t}\n\t\twhile (choice.maxCount !== undefined && hasMax(choicesSoFar)) {\n\t\t\tchoice = reRoll();\n\t\t\tsuccess = false;\n\t\t}\n\t}\n\treturn choice;\n}\n\nfunction getRandomTileData(difficulty, isMain=false) {\n\n\tvar choices = DIFFICULTY_DATA[difficulty][isMain ? \"main\" : \"choices\"];\n\n\t// get the random choice from the diff data\n\tvar choice = Utils.pickWeightedRandom(choices);\n\n\t// compute the value using given limits and type\n\tvar value = undefined;\n\tswitch (choice.type) {\n\t\tcase \"integer\":\n\t\t\tvalue = Utils.rand(...choice.limits);\n\t\t\tbreak;\n\t\tcase \"fraction\":\n\t\t\tbreak;\n\t\tcase \"power\":\n\t\tcase \"exponent\":\n\t\t\tvalue = `${Utils.rand(...choice.baseLimits)} ^ ${choice.power || Utils.rand(...choice.powerLimits)}`;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tvalue = NaN;\n\t}\n\n\tvar operation = isMain ? \"\" : choice.operation;\n\n\treturn {\n\t\tvalue,\n\t\tvalueString: operation+value,\n\t\toperation,\n\t\tcondition: choice.condition,\n\t\tmaxCount: choice.maxCount\n\t};\n}*/\n"]}