{"version":3,"sources":["../es6/difficulty.js"],"names":[],"mappings":"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","file":"difficulty.js","sourcesContent":["var DIFFICULTY_DATA = [null,\n\n//----------------------DIFFICULTY 1-----------------------------\n\t{\n\t\tmain: [\n\t\t\t{\n\t\t\t\ttype: \"integer\",\n\t\t\t\tweight: 1,\n\t\t\t\tlimits: [1,50]\n\t\t\t}\n\t\t],\n\t\tchoices: [\n\t\t\t{\n\t\t\t\ttype: \"integer\",\n\t\t\t\tweight: 1,\n\t\t\t\tlimits: [1, 50],\n\t\t\t\toperation: \"add\"\n\t\t\t}\n\t\t]\n\t},\n\t\n//----------------------DIFFICULTY 2-----------------------------\n\t\t{\n\t\tmain: [\n\t\t\t{\n\t\t\t\ttype: \"integer\",\n\t\t\t\tweight: 1,\n\t\t\t\tlimits: [1, 50]\n\t\t\t}\n\t\t],\n\t\tchoices: [\n\t\t\t{\n\t\t\t\ttype: \"integer\",\n\t\t\t\tweight: 3,\n\t\t\t\tlimits: [1, 99],\n\t\t\t\toperation: \"add\"\n\t\t\t},\n\t\t\t{\n\t\t\t\ttype: \"integer\",\n\t\t\t\tweight: 1,\n\t\t\t\tlimits: [1, 50],\n\t\t\t\toperation: \"sub\"\n\t\t\t}\n\t\t]\n\t},\n\t\n//----------------------DIFFICULTY 3-----------------------------\n\t{\n\t\tmain: [\n\t\t\t{\n\t\t\t\ttype: \"integer\",\n\t\t\t\tweight: 1,\n\t\t\t\tlimits: [1,500]\n\t\t\t}\n\t\t],\n\t\tchoices: [\n\t\t\t{\n\t\t\t\ttype: \"integer\",\n\t\t\t\tweight: 1,\n\t\t\t\tlimits: [1, 500],\n\t\t\t\toperation: \"add\"\n\t\t\t},\n\t\t\t{\n\t\t\t\ttype: \"integer\",\n\t\t\t\tweight: 1,\n\t\t\t\tlimits: [1,500],\n\t\t\t\toperation: \"sub\"\n\t\t\t}\n\t\t]\n\t},\n\n//----------------------DIFFICULTY 4-----------------------------\n\t{\n\t\tmain: [\n\t\t\t{\n\t\t\t\ttype: \"integer\",\n\t\t\t\tweight: 10,\n\t\t\t\tlimits: [1, 25]\n\t\t\t},\n\t\t\t{\n\t\t\t\ttype: \"integer\",\n\t\t\t\tweight: 1,\n\t\t\t\tlimits: [1, 99]\n\t\t\t}\n\t\t],\n\t\tchoices: [\n\t\t\t{\n\t\t\t\ttype: \"integer\",\n\t\t\t\tcondition: \"mainNumber <= 12\", // because multiplication tables\n\t\t\t\tlimits: [1,12],\n\t\t\t\tweight: 20,\n\t\t\t\toperation: \"multi\",\n\t\t\t\tmaxCount: 1\n\t\t\t},\n\t\t\t{\n\t\t\t\ttype: \"integer\",\n\t\t\t\tlimits: [1,50],\n\t\t\t\tweight: 1,\n\t\t\t\toperation: \"add\"\n\t\t\t},\n\t\t\t{\n\t\t\t\ttype: \"integer\",\n\t\t\t\tlimits: [1,50],\n\t\t\t\tweight: 1,\n\t\t\t\toperation: \"sub\"\n\t\t\t}\n\t\t]\n\t},\n\n\t{\n\t\tmain: [ { type: \"power\", baseLimits: [1,12], powerLimits: [2,2] }],\n\t\tchoice: [ { type: \"power\", baseLimits: [1,12], powerLimits: [2,2] }]\n\t}\n];\n\nclass Choice {\n    constructor(diff, isMain=false) {\n        this.which = isMain ? \"main\" : \"choices\";\n        this.diff = diff;\n\t\tthis.data = undefined;\n    }\n\n\tget id() {\n\t\treturn [\n\t\t\tthis.diff,\n\t\t\tthis.which.charAt(0),\n\t\t\tDIFFICULTY_DATA[this.diff][this.which].indexOf(this.data)\n\t\t].join(\".\");\n\t}\n}\n\nfunction _genSingleChoiceTile(diff, group, mainNumber) {\n\n\tmainNumber = +mainNumber;\n\n\tvar choice = TileRegistry.getRandomTileData(diff);\n\tvar choicesSoFar = group.choices;\n\n\tvar reRoll = () => TileRegistry.getRandomTileData(diff);\n\n\t//called before adding any more elements, preventing going over max\n\tvar hasMax = function(choices) { // currently limited to one option with maxCount; need some sort of ID system to determine which choice is which\n\t\tvar count = 0;\n\t\tvar max = 0;\n\t\treturn choices.some(function(c){\n\t\t\tif (c.maxCount !== undefined) {\n\t\t\t\tif (max === 0) max = c.maxCount;\n\t\t\t\tif (max > 0 && max === ++count) return true;\n\t\t\t}\n\t\t});\n\t};\n\n\tvar success = false;\n\twhile (!success && ((choice.condition !== undefined) || (choice.maxCount !== undefined))) {\n\t\tsuccess = true;\n\t\twhile (choice.condition !== undefined && math.eval(choice.condition, {mainNumber}) === false) {\n\t\t\tchoice = reRoll();\n\t\t\tsuccess = false;\n\t\t}\n\t\twhile (choice.maxCount !== undefined && hasMax(choicesSoFar)) {\n\t\t\tchoice = reRoll();\n\t\t\tsuccess = false;\n\t\t}\n\t}\n\treturn choice;\n}\n\nfunction getRandomTileData(difficulty, isMain=false) {\n\n\tvar choices = DIFFICULTY_DATA[difficulty][isMain ? \"main\" : \"choices\"];\n\n\t// get the random choice from the diff data\n\tvar choice = Utils.pickWeightedRandom(choices);\n\n\t// compute the value using given limits and type\n\tvar value = undefined;\n\tswitch (choice.type) {\n\t\tcase \"integer\":\n\t\t\tvalue = Utils.rand(...choice.limits);\n\t\t\tbreak;\n\t\tcase \"fraction\":\n\t\t\t// TODO do fraction stuff\n\t\t\tbreak;\n\t\tcase \"power\":\n\t\tcase \"exponent\":\n\t\t\tvalue = `${Utils.rand(...choice.baseLimits)} ^ ${choice.power || Utils.rand(...choice.powerLimits)}`;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tvalue = NaN;\n\t}\n\n\tvar operation = isMain ? \"\" : choice.operation;\n\n\treturn {\n\t\tvalue,\n\t\tvalueString: operation+value,\n\t\toperation,\n\t\tcondition: choice.condition,\n\t\tmaxCount: choice.maxCount\n\t};\n}"]}